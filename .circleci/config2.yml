# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  python: circleci/python@1.5.0

# xTB needs gcc-8 and gfortran-8 to be compiled
matrix:
  include:
    - machine: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - gfortran-8
            - liblapack-dev
            - libblas-dev
      env: CC='gcc-8' FC='gfortran-8'

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: "Setup custom environment variables"
          command: echo 'export OMP_STACKSIZE="5G"' >> $BASH_ENV
      - run: |
          # create and activate the build/test environment
          conda create -q -n tenv python=$TRAVIS_PYTHON_VERSION pip cmake
          source activate tenv
          sudo apt-get update
      -run: |
          conda install -c conda-forge openbabel # for some reason, openbabel v3.0.0 is not compatible with RDKit
          conda install -c conda-forge rdkit # different versions of RDKit lead to different amount of conformers and E, which messes up the test results
          pip install PyYAML
          pip install pandas
          pip install pytest
          python setup.py install
          pip install progress
          pip install pytest-cov
          pip install codecov
          pip install ase
          pip install torch==1.5.0+cpu torchvision==0.6.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
          pip install torchani==2.2
          pip install goodvibes
          pip install cclib
          pip install matplotlib
          pip install seaborn
          # for xTB
          # - pip install Cython
          pip install importlib
          pip install numpy
          pip install cffi
          pip install qcelemental
          pip install meson
          pip install ninja
          sudo apt-get install libblas-dev liblapack-dev
          sudo apt-get install libopenblas-base libopenblas-dev

      - run: |
          # For xTB
          wget https://github.com/grimme-lab/xtb/archive/v6.3.0.zip
          unzip v6.3.0.zip
          cd xtb-6.3.0
          meson setup build_gcc --buildtype release -Dla_backend=openblas --warnlevel 0
          XTBHOME=$PWD
          XTBPATH=${XTBHOME}/share/xtb:${XTBHOME}:${HOME}
          MANPATH=${MANPATH}:${XTBHOME}/share/man
          PATH=${PATH}:${XTBHOME}/bin
          LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${XTBHOME}/lib
          PYTHONPATH=${PYTHONPATH}:${XTBHOME}/python
          export PATH XTBPATH MANPATH LD_LIBRARY_PATH PYTHONPATH
          git clone --branch=master https://github.com/grimme-lab/xtb-python
          cd xtb-python
          # change the previous git clone part into this wget + unzip zip when there is a release (that way the version used will always be the same)
          wget https://github.com/grimme-lab/xtb-python/archive/v20.1.zip
          unzip v20.1.zip
          cd xtb-python-20.1
          # compile xtb-python
          git submodule update --init
          meson setup build --prefix=$PWD
          ninja -C build install
          pip install -e .
          cd ..
          cd ..
      - run: |
          # install AQME only to install its dependencies
          python -m pip install --upgrade pip
          pip install .
          # install and run pytest
          pip install pytest
          pip install pytest-cov
          # uninstall the pip version of AQME to avoid duplication when running the program for Codecov
          pip uninstall -y aqme
          python -m pytest -v --cov=aqme
          codecov

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
  # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
