# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: continuumio/miniconda3
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: "Setup custom environment variables"
          command: echo 'export OMP_STACKSIZE="5G"' >> $BASH_ENV
      - run: |
          # install RDKit and OpenBabel
          conda create -n cienv python=3.7
          source activate cienv
          apt-get update
          apt-get install -y gcc-10
          apt-get install -y gfortran-10
          apt-get install -y unzip
          apt-get install -y libgomp1 libblas-dev liblapack-dev
          apt-get install -y libopenblas-base libopenblas-dev
          conda install -y -c conda-forge rdkit
          conda install -y -c conda-forge openbabel

          pip install importlib
          pip install numpy
          pip install cffi
          pip install qcelemental
          pip install meson
          pip install ninja

          # xtb install
          wget https://github.com/grimme-lab/xtb/archive/v6.3.0.zip
          unzip v6.3.0.zip
          cd xtb-6.3.0
          export FC=gfortran-10 CC=gcc-10
          meson setup build_gcc --buildtype release -Dla_backend=openblas --warnlevel 0
          cd ..

          # xtb-python install
          wget https://github.com/grimme-lab/xtb-python/archive/v20.1.zip
          unzip v20.1.zip
          cd xtb-python-20.1
          python setup.py install
          cd ..

          XTBHOME=$PWD/xtb-6.3.0
          XTBPATH=${XTBHOME}/share/xtb:${XTBHOME}:${HOME}
          MANPATH=${MANPATH}:${XTBHOME}/share/man
          PATH=${PATH}:${XTBHOME}/bin
          LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${XTBHOME}/lib
          PYTHONPATH=${PYTHONPATH}:${XTBHOME}/python
          export PATH XTBPATH MANPATH LD_LIBRARY_PATH PYTHONPATH

          # install AQME only to install its dependencies
          python -m pip install --upgrade pip
          pip install .
          # install and run pytest
          pip install pytest
          pip install pytest-cov
          # uninstall the pip version of AQME to avoid duplication when running the program for Codecov
          pip uninstall -y aqme
          python -m pytest -v --cov=aqme
          codecov
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
